TranslationUnit <line:2:1> 
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> printf 'int (ptr to const char, ...)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> scanf 'int (ptr to const char, ...)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> malloc 'ptr to void (int)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> bytes 'int'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> free 'void (ptr to void)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> ptr 'ptr to void'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> sprintf 'int (ptr to char, ptr to const char, ...)'
|     |-Param <line:0:0> 
|     |  -Decl <line:0:0> dest 'ptr to char'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> sscanf 'int (ptr to const char, ptr to const char, ...)'
|     |-Param <line:0:0> 
|     |  -Decl <line:0:0> src 'ptr to const char'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-ClassDef <line:2:1> struct 'S'
|  -MemberSpecification <line:3:2> 
|   |-MemberDeclaratorList <line:3:6> 
|   |  -Decl <line:3:6> a 'int'
|    -FuncDef <line:4:2> 
|     |-FunctionDecl <line:4:6> foo 'int (const ptr to S)'
|     |  -Param <line:4:6> 
|     |    -Decl <line:4:6> this 'const ptr to S'
|      -FuncBody <line:4:12> 
|        -CompoundStmt <line:4:12> 
|         |-DeclarStmt <line:5:3> 
|         |  -SimpleDeclar <line:5:3> 
|         |    -InitDeclarator <line:5:7> 
|         |     |-Decl <line:5:7> res 'int'
|         |      -IntLiteral <line:5:13> 0
|         |-CompoundStmt <line:6:3> 
|         | |-DeclarStmt <line:6:5> 
|         | |  -SimpleDeclar <line:6:5> 
|         | |    -InitDeclarator <line:6:9> 
|         | |     |-Decl <line:6:9> a 'int'
|         | |      -IntLiteral <line:6:13> 5
|         |  -ExprStmt <line:6:16> 
|         |    -AssignmentExpr <line:6:16> '+=' lhs_type='int'
|         |     |-IdExpr <line:6:16> res, declared on line 5
|         |      -LValToRValExpr <line:6:16> 
|         |        -IdExpr <line:6:23> a, declared on line 6
|         |-ExprStmt <line:7:3> 
|         |  -AssignmentExpr <line:7:3> '+=' lhs_type='int'
|         |   |-IdExpr <line:7:3> res, declared on line 5
|         |    -LValToRValExpr <line:7:3> 
|         |      -MemberAccessExpr <line:7:10> ->a
|         |        -ImplicitThisExpr <line:7:10> 
|          -ReturnStmt <line:8:3> 
|            -LValToRValExpr <line:8:3> 
|              -IdExpr <line:8:10> res, declared on line 5
|-EmptyDeclaration <line:10:2> 
 -FuncDef <line:12:1> 
  |-FunctionDecl <line:12:5> main 'int ()'
   -FuncBody <line:12:12> 
     -CompoundStmt <line:12:12> 
      |-DeclarStmt <line:13:2> 
      |  -SimpleDeclar <line:13:2> 
      |    -InitDeclarator <line:13:4> 
      |      -Decl <line:13:4> s 'S'
      |-ExprStmt <line:14:2> 
      |  -AssignmentExpr <line:14:2> '=' lhs_type='int'
      |   |-MemberAccessExpr <line:14:2> .a
      |   |  -IdExpr <line:14:2> s, declared on line 13
      |    -IntLiteral <line:14:8> 37
       -ReturnStmt <line:15:2> 
         -CallExpr <line:15:9> 'int (const ptr to S)', function declared on line: 4
           -MemberAccessExpr <line:15:9> .foo
             -IdExpr <line:15:9> s, declared on line 13
