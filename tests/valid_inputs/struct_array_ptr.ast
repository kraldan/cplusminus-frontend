TranslationUnit <line:3:1> 
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> printf 'int (ptr to const char, ...)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> scanf 'int (ptr to const char, ...)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> malloc 'ptr to void (int)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> bytes 'int'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> free 'void (ptr to void)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> ptr 'ptr to void'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> sprintf 'int (ptr to char, ptr to const char, ...)'
|     |-Param <line:0:0> 
|     |  -Decl <line:0:0> dest 'ptr to char'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> sscanf 'int (ptr to const char, ptr to const char, ...)'
|     |-Param <line:0:0> 
|     |  -Decl <line:0:0> src 'ptr to const char'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-ClassDef <line:3:1> struct 'S'
|  -MemberSpecification <line:4:2> 
|   |-MemberDeclaratorList <line:4:6> 
|   |  -Decl <line:4:6> a 'int'
|    -MemberDeclaratorList <line:5:6> 
|      -Decl <line:5:6> b 'int'
 -FuncDef <line:8:1> 
  |-FunctionDecl <line:8:5> main 'int ()'
   -FuncBody <line:8:12> 
     -CompoundStmt <line:8:12> 
      |-DeclarStmt <line:9:2> 
      |  -SimpleDeclar <line:9:2> 
      |    -InitDeclarator <line:9:4> 
      |      -Decl <line:9:4> arr '[5 x S]'
      |-DeclarStmt <line:10:2> 
      |  -SimpleDeclar <line:10:2> 
      |    -InitDeclarator <line:10:4> 
      |     |-Decl <line:10:5> p 'ptr to S'
      |      -UnaryExpr <line:10:9> '&'
      |        -SubscriptExpr <line:10:10> 
      |         |-ArrToPtrExpr <line:0:0> 
      |         |  -IdExpr <line:10:10> arr, declared on line 9
      |          -IntLiteral <line:10:14> 0
      |-ExprStmt <line:11:2> 
      |  -AssignmentExpr <line:11:2> '=' lhs_type='int'
      |   |-MemberAccessExpr <line:11:2> .a
      |   |  -SubscriptExpr <line:11:2> 
      |   |   |-LValToRValExpr <line:11:2> 
      |   |   |  -IdExpr <line:11:2> p, declared on line 10
      |   |    -IntLiteral <line:11:4> 0
      |    -LValToRValExpr <line:11:2> 
      |      -AssignmentExpr <line:11:11> '=' lhs_type='int'
      |       |-MemberAccessExpr <line:11:11> .b
      |       |  -SubscriptExpr <line:11:11> 
      |       |   |-ArrToPtrExpr <line:0:0> 
      |       |   |  -IdExpr <line:11:11> arr, declared on line 9
      |       |    -IntLiteral <line:11:15> 1
      |        -IntLiteral <line:11:22> 21
       -ReturnStmt <line:12:2> 
         -BinaryExpr <line:12:9> '+'
          |-LValToRValExpr <line:12:9> 
          |  -MemberAccessExpr <line:12:9> .a
          |    -SubscriptExpr <line:12:9> 
          |     |-ArrToPtrExpr <line:0:0> 
          |     |  -IdExpr <line:12:9> arr, declared on line 9
          |      -IntLiteral <line:12:13> 0
           -LValToRValExpr <line:12:9> 
             -MemberAccessExpr <line:12:20> .b
               -SubscriptExpr <line:12:20> 
                |-LValToRValExpr <line:12:20> 
                |  -IdExpr <line:12:20> p, declared on line 10
                 -IntLiteral <line:12:22> 1
