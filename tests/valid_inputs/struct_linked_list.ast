TranslationUnit <line:2:1> 
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> printf 'int (ptr to const char, ...)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> scanf 'int (ptr to const char, ...)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> malloc 'ptr to void (int)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> bytes 'int'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> free 'void (ptr to void)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> ptr 'ptr to void'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> sprintf 'int (ptr to char, ptr to const char, ...)'
|     |-Param <line:0:0> 
|     |  -Decl <line:0:0> dest 'ptr to char'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> sscanf 'int (ptr to const char, ptr to const char, ...)'
|     |-Param <line:0:0> 
|     |  -Decl <line:0:0> src 'ptr to const char'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-ClassDef <line:2:1> struct 'LinkedList'
|  -MemberSpecification <line:3:2> 
|   |-MemberDeclaratorList <line:3:6> 
|   |  -Decl <line:3:6> val 'int'
|    -MemberDeclaratorList <line:4:13> 
|      -Decl <line:4:15> next 'ptr to LinkedList'
 -FuncDef <line:7:1> 
  |-FunctionDecl <line:7:5> main 'int ()'
   -FuncBody <line:7:12> 
     -CompoundStmt <line:7:12> 
      |-DeclarStmt <line:8:2> 
      |  -SimpleDeclar <line:8:2> 
      |   |-InitDeclarator <line:8:13> 
      |   |  -Decl <line:8:13> node1 'LinkedList'
      |    -InitDeclarator <line:8:20> 
      |      -Decl <line:8:20> node2 'LinkedList'
      |-ExprStmt <line:9:2> 
      |  -AssignmentExpr <line:9:2> '=' lhs_type='ptr to LinkedList'
      |   |-MemberAccessExpr <line:9:2> .next
      |   |  -IdExpr <line:9:2> node1, declared on line 8
      |    -UnaryExpr <line:9:15> '&'
      |      -IdExpr <line:9:16> node2, declared on line 8
      |-ExprStmt <line:10:2> 
      |  -AssignmentExpr <line:10:2> '=' lhs_type='int'
      |   |-MemberAccessExpr <line:10:2> .val
      |   |  -IdExpr <line:10:2> node2, declared on line 8
      |    -IntLiteral <line:10:14> 22
       -ReturnStmt <line:11:2> 
         -LValToRValExpr <line:11:2> 
           -MemberAccessExpr <line:11:9> ->val
             -LValToRValExpr <line:11:9> 
               -MemberAccessExpr <line:11:9> .next
                 -IdExpr <line:11:9> node1, declared on line 8
