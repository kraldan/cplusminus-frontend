TranslationUnit <line:2:1> 
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> printf 'int (ptr to const char, ...)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> scanf 'int (ptr to const char, ...)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> malloc 'ptr to void (int)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> bytes 'int'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> free 'void (ptr to void)'
|      -Param <line:0:0> 
|        -Decl <line:0:0> ptr 'ptr to void'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> sprintf 'int (ptr to char, ptr to const char, ...)'
|     |-Param <line:0:0> 
|     |  -Decl <line:0:0> dest 'ptr to char'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-SimpleDeclar <line:0:0> 
|  -InitDeclarator <line:0:0> 
|    -FunctionDecl <line:0:0> sscanf 'int (ptr to const char, ptr to const char, ...)'
|     |-Param <line:0:0> 
|     |  -Decl <line:0:0> src 'ptr to const char'
|      -Param <line:0:0> 
|        -Decl <line:0:0> format 'ptr to const char'
|-ClassDef <line:2:1> struct 'A'
|  -MemberSpecification <line:3:2> 
|    -FuncDef <line:3:2> 
|     |-FunctionDecl <line:3:6> foo 'int (const ptr to A)'
|     |  -Param <line:3:6> 
|     |    -Decl <line:3:6> this 'const ptr to A'
|      -FuncBody <line:3:12> 
|        -CompoundStmt <line:3:12> 
|          -ReturnStmt <line:3:13> 
|            -IntLiteral <line:3:20> 20
|-EmptyDeclaration <line:4:2> 
|-ClassDef <line:6:1> struct 'B'
|  -MemberSpecification <line:7:2> 
|    -FuncDef <line:7:2> 
|     |-FunctionDecl <line:7:6> foo 'int (const ptr to B)'
|     |  -Param <line:7:6> 
|     |    -Decl <line:7:6> this 'const ptr to B'
|      -FuncBody <line:7:12> 
|        -CompoundStmt <line:7:12> 
|          -ReturnStmt <line:7:13> 
|            -IntLiteral <line:7:20> 1
|-EmptyDeclaration <line:8:2> 
 -FuncDef <line:10:1> 
  |-FunctionDecl <line:10:5> main 'int ()'
   -FuncBody <line:10:12> 
     -CompoundStmt <line:10:12> 
      |-DeclarStmt <line:11:2> 
      |  -SimpleDeclar <line:11:2> 
      |    -InitDeclarator <line:11:4> 
      |      -Decl <line:11:4> a 'A'
      |-DeclarStmt <line:12:2> 
      |  -SimpleDeclar <line:12:2> 
      |    -InitDeclarator <line:12:4> 
      |      -Decl <line:12:4> b 'B'
       -ReturnStmt <line:13:2> 
         -BinaryExpr <line:13:9> '+'
          |-BinaryExpr <line:13:9> '+'
          | |-BinaryExpr <line:13:9> '+'
          | | |-CallExpr <line:13:9> 'int (const ptr to A)', function declared on line: 3
          | | |  -MemberAccessExpr <line:13:9> .foo
          | | |    -IdExpr <line:13:9> a, declared on line 11
          | |  -CallExpr <line:13:19> 'int (const ptr to A)', function declared on line: 3
          | |    -MemberAccessExpr <line:13:19> ->foo
          | |      -UnaryExpr <line:13:20> '&'
          | |        -IdExpr <line:13:21> a, declared on line 11
          |  -CallExpr <line:13:33> 'int (const ptr to B)', function declared on line: 7
          |    -MemberAccessExpr <line:13:33> .foo
          |      -IdExpr <line:13:33> b, declared on line 12
           -CallExpr <line:13:43> 'int (const ptr to B)', function declared on line: 7
             -MemberAccessExpr <line:13:43> ->foo
               -UnaryExpr <line:13:44> '&'
                 -IdExpr <line:13:45> b, declared on line 12
